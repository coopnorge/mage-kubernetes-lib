{{- $name := "disallow-capabilities" }}
{{- if eq (include "kyverno-policies.podSecurityBaseline" (merge (dict "name" $name) .)) "true" }}
{{- include "kyverno-policies.supportedKyvernoCheck" (dict "top" . "ver" ">= 1.6.0-0") }}
apiVersion: kyverno.io/v1
kind: {{ .Values.policyKind }}
metadata:
  name: {{ $name }}
  annotations:
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,StatefulSet,ReplicaSet,ReplicationController
    policies.kyverno.io/title: Disallow Capabilities
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    {{- if .Values.podSecuritySeverity }}
    policies.kyverno.io/severity: {{ .Values.podSecuritySeverity }}
    {{- end }}
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Adding capabilities beyond those listed in the policy must be disallowed.
  labels: {{ include "kyverno-policies.labels" . | nindent 4 }}
spec:
  {{- with index .Values "validationFailureActionByPolicy" $name }}
  validationFailureAction: {{ toYaml . }}
  {{- else }}
  # validationFailureAction: {{ .Values.validationFailureAction }}
  validationFailureAction: audit
  {{- end }}
  {{- with concat (index .Values "validationFailureActionOverrides" "all") (default list (index .Values "validationFailureActionOverrides" $name)) }}
  validationFailureActionOverrides: {{ toYaml . | nindent 4 }}
  {{- end }}
  background: {{ .Values.background }}
  failurePolicy: {{ .Values.failurePolicy }}
  rules:
    - name: adding-capabilities
      match:
        any:
        - resources:
            kinds:
              - Pod
      {{- with index .Values "policyExclude" $name }}
      exclude:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- $preconditions := index .Values "policyPreconditions" $name }}
      {{- if $preconditions }}
      {{- with $preconditions }}
      preconditions:
        {{- if .all }}
        all:
        - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
          operator: NotEquals
          value: DELETE
        {{- toYaml .all | nindent 8 }}
        {{- else }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- else }}
      preconditions:
        all:
        - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
          operator: NotEquals
          value: DELETE
      {{- end }}
      {{- if not (quote .Values.skipBackgroundRequests | empty)  }}
      skipBackgroundRequests: {{ .Values.skipBackgroundRequests }}
      {{- end }}
      context:
        - name: capabilities
          variable:
            value: ["AUDIT_WRITE","CHOWN","DAC_OVERRIDE","FOWNER","FSETID","KILL","MKNOD","NET_BIND_SERVICE","SETFCAP","SETGID","SETPCAP","SETUID","SYS_CHROOT"]
      validate:
        message: >-
          Any capabilities added beyond the allowed list (AUDIT_WRITE, CHOWN, DAC_OVERRIDE, FOWNER,
          FSETID, KILL, MKNOD, NET_BIND_SERVICE, SETFCAP, SETGID, SETPCAP, SETUID, SYS_CHROOT)
          are disallowed. Service mesh initContainers may additionally add NET_ADMIN and NET_RAW.          
        foreach:
          - list: request.object.spec.initContainers[]
            preconditions:
              all:
              - key: {{ "{{ element.image || '' }}" | quote }}
                operator: AnyIn
                value:
                - "*/istio/proxyv2*"
              - key: {{ `"{{ element.securityContext.capabilities.add[] || `}}`[]` {{` }}"` }}
                operator: AnyNotIn
                value:
                  - NET_ADMIN
                  - NET_RAW
                  - {{ "{{ capabilities || '' }}" | quote }}
            deny:
              conditions:
                all:
                - key: {{ `"{{ element.securityContext.capabilities.add[] || `}}`[]` {{` }}"` }}
                  operator: AnyNotIn
                  value: {{ "{{ capabilities || '' }}" | quote }}
                  message: The service mesh initContainer {{`{{ element.name }}`}} is attempting to add forbidden capabilities.
          - list: request.object.spec.initContainers[]
            preconditions:
              all:
              - key: {{ "{{ element.image || '' }}" | quote }}
                operator: AnyNotIn
                value:
                - "*/istio/proxyv2*"
            deny:
              conditions:
                all:
                - key: {{ `"{{ element.securityContext.capabilities.add[] || `}}`[]` {{` }}"` }}
                  operator: AnyNotIn
                  value: {{ "{{ capabilities || '' }}" | quote }}
                  message: The initContainer {{`{{ element.name }}`}} is attempting to add forbidden capabilities.
          - list: request.object.spec.[ephemeralContainers, containers][]
            deny:
              conditions:
                all:
                - key: {{ `"{{ element.securityContext.capabilities.add[] || `}}`[]` {{` }}"` }}
                  operator: AnyNotIn
                  value: {{ "{{ capabilities || '' }}" | quote }}
                  message: The container {{`{{ element.name }}`}} is attempting to add forbidden capabilities.

{{- end }}
